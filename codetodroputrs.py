# -*- coding: utf-8 -*-
"""codetodropUTRs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wz2GQSwwNb17DFEv0HAL63ei9lCbwzqe
"""

import pandas as pd
import numpy as np

# Create dummy data with promoters and terminators
np.random.seed(0)
dummy_data = {
    'ensembl_gene_id': [f'ENSG{str(i).zfill(11)}' for i in range(1, 11)],
    'promoter': ['A' * (i + 90) for i in range(10)],  # Generate dummy promoters with increasing length
    'terminator': ['T' * (i + 90) for i in range(10)],  # Generate dummy terminators with increasing length
    'condition_1': np.random.poisson(lam=100, size=10),
    'condition_2': np.random.poisson(lam=100, size=10),
    'condition_3': np.random.poisson(lam=100, size=10),
    'condition_4': np.random.poisson(lam=100, size=10),
    'condition_5': np.random.poisson(lam=100, size=10),
}
df = pd.DataFrame(dummy_data)

def filter_short_sequences(df, promoter_threshold, terminator_threshold):
    # Remove rows where the length of the promoter sequence is less than the promoter_threshold
    df = df[df['promoter'].str.len() >= promoter_threshold]
    # Remove rows where the length of the terminator sequence is less than the terminator_threshold
    df = df[df['terminator'].str.len() >= terminator_threshold]
    return df

# Define thresholds for "short" promoters and terminators
promoter_threshold = 100  # for example, 100 bp
terminator_threshold = 100  # for example, 100 bp

# Apply the function to filter out short promoters and terminators
filtered_df = filter_short_sequences(df, promoter_threshold, terminator_threshold)

# Display the filtered dataset
filtered_df

